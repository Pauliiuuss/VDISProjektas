{"version":3,"sources":["services/auth.service.js","components/navbar.component.js","components/login.component.js","components/register.component.js","services/auth-header.js","services/user.service.js","components/board-user.component.js","components/board-moderator.component.js","components/board-admin.component.js","services/admin.service.js","components/AdminMainPage.jsx","components/MainAferLogin.jsx","App.js","serviceWorker.js","index.js","img/logo.png"],"names":["username","password","axios","post","API_URL","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","email","parse","getItem","Navbar","props","logOut","bind","state","showModeratorBoard","showAdminBoard","currentUser","undefined","user","AuthService","getCurrentUser","this","setState","roles","includes","logout","className","src","logo","alt","style","width","to","href","onClick","Component","required","value","role","Login","handleLogin","onChangeUsername","onChangePassword","loading","message","e","target","preventDefault","form","validateAll","checkBtn","context","_errors","length","login","history","push","window","location","reload","error","marginTop","backgroundColor","paddingBottom","onSubmit","ref","c","htmlFor","type","name","onChange","validations","disabled","display","isEmail","vusername","vpassword","Register","handleRegister","onChangeEmail","successful","register","authHeader","Authorization","console","log","get","headers","BoardUser","content","UserService","getUserBoard","toString","BoardModerator","getModeratorBoard","BoardAdmin","getAdminBoard","body","match","AdminMainPage","pass","selectedRole","redirect","userReady","handleCreate","a","AdminService","createUser","resMessage","handleSelectChange","handleInputChange","event","placeholder","id","aria-describedby","defaultValue","scope","MainAfterLogin","indexOf","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.1af27bf8.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = process.env.PUBLIC_URL + \"/api/auth/\";\n// const API_URL = \"http://localhost:8080/api/auth/\";\n\nclass AuthService {\n  login(username, password) {\n    return axios\n      .post(API_URL + \"signin\", {\n        username,\n        password,\n      })\n      .then((response) => {\n        if (response.data.accessToken) {\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n        }\n\n        return response.data;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  register(username, email, password) {\n    return axios.post(API_URL + \"signup\", {\n      username,\n      password,\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n}\n\nexport default new AuthService();\n","import React, { Component } from 'react';\nimport AuthService from '../services/auth.service';\nimport logo from '../img/logo.png';\nimport { Link } from 'react-router-dom';\n\nexport default class Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.logOut = this.logOut.bind(this);\n\n    this.state = {\n      showModeratorBoard: false,\n      showAdminBoard: false,\n      currentUser: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const user = AuthService.getCurrentUser();\n\n    if (user) {\n      this.setState({\n        currentUser: user,\n        showModeratorBoard: user.roles.includes('ROLE_MODERATOR'),\n        showAdminBoard: user.roles.includes('ROLE_ADMIN'),\n      });\n    }\n  }\n\n  logOut() {\n    AuthService.logout();\n  }\n\n  render() {\n    const { currentUser, showModeratorBoard, showAdminBoard } = this.state;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <img src={logo} alt=\"logo\" style={{ width: '5rem' }} />\n          <div className=\"navbar-nav mr-auto\">\n            {showModeratorBoard && (\n              <li className=\"nav-item\">\n                <Link to={'/dis-app/mod'} className=\"nav-link\">\n                  Moderator Board\n                </Link>\n              </li>\n            )}\n\n            {showAdminBoard && (\n              <li className=\"nav-item\">\n                <Link to={'/dis-app/admin'} className=\"nav-link\">\n                  Admin Board\n                </Link>\n              </li>\n            )}\n\n            {currentUser && (\n              <li className=\"nav-item\">\n                <Link to={'/dis-app/user'} className=\"nav-link\">\n                  User\n                </Link>\n              </li>\n            )}\n          </div>\n\n          {currentUser ? (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={'/dis-app/profile'} className=\"nav-link\">\n                  {currentUser.username}\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <a\n                  href=\"/dis-app/login\"\n                  className=\"nav-link\"\n                  onClick={this.logOut}\n                >\n                  LogOut\n                </a>\n              </li>\n            </div>\n          ) : (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={'/dis-app/register'} className=\"nav-link\">\n                  Sign Up\n                </Link>\n              </li>\n            </div>\n          )}\n        </nav>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport logo from \"../img/logo.png\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Privalomi laukai turi būti užpildyti!\n      </div>\n    );\n  }\n};\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      username: \"\",\n      password: \"\",\n      loading: false,\n      message: \"\",\n    };\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value,\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n\n  handleLogin(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      loading: true,\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.login(this.state.username, this.state.password).then(\n        () => {\n          this.props.history.push(\"/dis-app/profile\");\n          window.location.reload();\n        },\n        (error) => {\n          const resMessage = \"Neteisingi prisijungimo vardas ar slaptažodis!\";\n\n          this.setState({\n            loading: false,\n            message: resMessage,\n          });\n        }\n      );\n    } else {\n      this.setState({\n        loading: false,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"mx-auto\"\n          style={{\n            width: \"30rem\",\n            marginTop: \"5rem\",\n            backgroundColor: \"#E2E2E2\",\n            paddingBottom: \"1rem\",\n          }}\n        >\n          <img src={logo} alt=\"logo\" style={{ width: \"30rem\" }} />\n          <Form\n            onSubmit={this.handleLogin}\n            ref={(c) => {\n              this.form = c;\n            }}\n          >\n            <div className=\"form-group mx-auto mt-3\" style={{ width: \"10rem\" }}>\n              <label htmlFor=\"username\">Prisijungimo vardas</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group mx-auto\" style={{ width: \"10rem\" }}>\n              <label htmlFor=\"password\">Slaptažodis</label>\n              <Input\n                type=\"password\"\n                className=\"form-control\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.onChangePassword}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group text-center mt-5\">\n              <button\n                className=\"btn btn-secondary\"\n                disabled={this.state.loading}\n              >\n                {this.state.loading && (\n                  <span className=\"spinner-border spinner-border-sm\"></span>\n                )}\n                <span>Prisijungti</span>\n              </button>\n            </div>\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={(c) => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n      // <div className=\"col-md-12\">\n      //   <div className=\"card card-container\">\n      //     <img\n      //       src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n      //       alt=\"profile-img\"\n      //       className=\"profile-img-card\"\n      //     />\n\n      //     <Form\n      //       onSubmit={this.handleLogin}\n      //       ref={(c) => {\n      //         this.form = c;\n      //       }}\n      //     >\n      //       <div className=\"form-group\">\n      //         <label htmlFor=\"username\">Username</label>\n      //         <Input\n      //           type=\"text\"\n      //           className=\"form-control\"\n      //           name=\"username\"\n      //           value={this.state.username}\n      //           onChange={this.onChangeUsername}\n      //           validations={[required]}\n      //         />\n      //       </div>\n\n      //       <div className=\"form-group\">\n      //         <label htmlFor=\"password\">Password</label>\n      //         <Input\n      //           type=\"password\"\n      //           className=\"form-control\"\n      //           name=\"password\"\n      //           value={this.state.password}\n      //           onChange={this.onChangePassword}\n      //           validations={[required]}\n      //         />\n      //       </div>\n\n      //       <div className=\"form-group\">\n      //         <button\n      //           className=\"btn btn-primary btn-block\"\n      //           disabled={this.state.loading}\n      //         >\n      //           {this.state.loading && (\n      //             <span className=\"spinner-border spinner-border-sm\"></span>\n      //           )}\n      //           <span>Login</span>\n      //         </button>\n      //       </div>\n\n      //       {this.state.message && (\n      //         <div className=\"form-group\">\n      //           <div className=\"alert alert-danger\" role=\"alert\">\n      //             {this.state.message}\n      //           </div>\n      //         </div>\n      //       )}\n      //       <CheckButton\n      //         style={{ display: 'none' }}\n      //         ref={(c) => {\n      //           this.checkBtn = c;\n      //         }}\n      //       />\n      //     </Form>\n      //   </div>\n      // </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Šis laukas privalomas!\n      </div>\n    );\n  }\n};\n\nconst email = (value) => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Nurodykite teisingą el. paštą.\n      </div>\n    );\n  }\n};\n\nconst vusername = (value) => {\n  if (value.length < 4 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Vartotojo vardą turi sudaryti nemažiau kaip 4 simboliai.\n      </div>\n    );\n  }\n};\n\nconst vpassword = (value) => {\n  if (value.length < 8 || value.length > 40) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Slaptažodį turi sudaryti nemažiau kaip 8 simboliai. Slaptažodyje turi\n        būti didžiųjų ir mažųjų raidžių ir bent vienas skaičius.\n      </div>\n    );\n  }\n};\n\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      successful: false,\n      message: \"\",\n    };\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value,\n    });\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value,\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n\n  handleRegister(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      successful: false,\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.register(\n        this.state.username,\n        this.state.email,\n        this.state.password\n      ).then(\n        (response) => {\n          this.setState({\n            message: response.data.message,\n            successful: true,\n          });\n        },\n        (error) => {\n          const resMessage = \"Įvyko klaida! Bandykite dar kartą.\";\n\n          this.setState({\n            successful: false,\n            message: resMessage,\n          });\n        }\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container\">\n          <img\n            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n            alt=\"profile-img\"\n            className=\"profile-img-card\"\n          />\n\n          <Form\n            onSubmit={this.handleRegister}\n            ref={(c) => {\n              this.form = c;\n            }}\n          >\n            {!this.state.successful && (\n              <div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Prisijungimo vardas</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onChangeUsername}\n                    validations={[required, vusername]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">El. paštas</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChangeEmail}\n                    validations={[required, email]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Slaptažodis</label>\n                  <Input\n                    type=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.onChangePassword}\n                    validations={[required, vpassword]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <button className=\"btn btn-primary btn-block\">\n                    Užregistruoti\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div\n                  className={\n                    this.state.successful\n                      ? \"alert alert-success\"\n                      : \"alert alert-danger\"\n                  }\n                  role=\"alert\"\n                >\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={(c) => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n","export default function authHeader() {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return { Authorization: 'Bearer ' + user.accessToken }; // for Spring Boot back-end\n    // return { \"x-access-token\": user.accessToken }; // for Node.js Express back-end\n  } else {\n    return console.log('Nera token');\n  }\n}\n","import axios from \"axios\";\nimport authHeader from \"./auth-header\";\n\nconst API_URL = process.env.PUBLIC_URL + \"/api/test/\";\n// const API_URL = \"http://localhost:8080/api/test/\";\n\nclass UserService {\n  getPublicContent() {\n    return axios.get(API_URL + \"all\");\n  }\n\n  getUserBoard() {\n    return axios.get(API_URL + \"user\", { headers: authHeader() });\n  }\n\n  getModeratorBoard() {\n    return axios.get(API_URL + \"mod\", { headers: authHeader() });\n  }\n\n  getAdminBoard() {\n    return axios.get(API_URL + \"admin\", { headers: authHeader() });\n  }\n}\n\nexport default new UserService();\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\",\n    };\n  }\n\n  componentDidMount() {\n    UserService.getUserBoard().then(\n      (response) => {\n        this.setState({\n          content: response.data,\n        });\n      },\n      (error) => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString(),\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardModerator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  componentDidMount() {\n    UserService.getModeratorBoard().then(\n      response => {\n        this.setState({\n          content: response.data\n        });\n      },\n      error => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport UserService from '../services/user.service';\n\nexport default class BoardAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: '',\n    };\n  }\n\n  componentDidMount() {\n    UserService.getAdminBoard().then(\n      (response) => {\n        this.setState({\n          content: response.data,\n        });\n      },\n      (error) => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString(),\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import axios from \"axios\";\nimport authHeader from \"./auth-header\";\n\nconst API_URL = process.env.PUBLIC_URL + \"/api/admin/\";\n// const API_URL = \"http://localhost:8080/api/admin/\";\n\nclass AdminService {\n  createUser(body) {\n    return axios.post(API_URL + \"create\", body, { headers: authHeader() });\n  }\n}\n\nexport default new AdminService();\n","import React, { Component } from \"react\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport AdminService from \"../services/admin.service\";\nimport CheckButton from \"react-validation/build/button\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport AuthService from \"../services/auth.service\";\n\nconst vusername = (value) => {\n  if (value.length === 0) return;\n  if (value.length < 4 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Prisijungimo vardas turi būti sudarytas iš ne mažiau kaip 4 simbolių.{\" \"}\n      </div>\n    );\n  }\n};\n\nconst vpassword = (value) => {\n  var paswd = /^(?=.*[0-9])(?=.*[!@#$%^&+*])[a-zA-Z0-9!@#$%^+&*].{8,20}$/;\n  if (value.length === 0) return;\n\n  if (value.length < 8 || value.length > 20 || value.match(paswd) === null) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Slaptažodyje, kurį turi sudaryti iš 8–20 simbolių, turi būti bent viena\n        didžioji raidė, viena mažoji raidė, vienas skaičius ir vienas simbolis.\n      </div>\n    );\n  }\n};\n\nexport default class AdminMainPage extends Component {\n  state = {\n    role: \"\",\n    name: \"\",\n    pass: \"\",\n    message: \"\",\n    successful: false,\n    selectedRole: \"ROLE_SPEC\",\n    loading: false,\n    redirect: null,\n    userReady: false,\n    currentUser: { username: \"\" },\n    roles: [],\n  };\n\n  handleCreate = async (e) => {\n    e.preventDefault();\n    this.setState({\n      message: \"\",\n      loading: true,\n    });\n\n    const { name, pass, selectedRole } = this.state;\n\n    this.form.validateAll();\n    if (this.checkBtn.context._errors.length === 0) {\n      await AdminService.createUser({\n        username: name,\n        password: pass,\n        role: selectedRole,\n      }).then(\n        (response) => {\n          this.setState({\n            message: response.data.message,\n            successful: true,\n            name: \"\",\n            pass: \"\",\n            loading: false,\n          });\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          this.setState({\n            successful: false,\n            message: resMessage,\n            loading: false,\n          });\n        }\n      );\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount() {\n    const currentUser = AuthService.getCurrentUser();\n\n    if (!currentUser) this.setState({ redirect: \"/dis-app/home\" });\n    this.setState({\n      currentUser: currentUser,\n      userReady: true,\n      roles: currentUser.roles,\n    });\n  }\n\n  handleSelectChange = (e) => {\n    const selectedRole = e.target.value;\n    this.setState({ selectedRole });\n  };\n\n  handleInputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    if (this.state.redirect) return <Redirect to={this.state.redirect} />;\n\n    const { currentUser, roles, name, pass } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div>\n          <Form\n            className=\"col-6 mx-auto mt-5\"\n            ref={(c) => {\n              this.form = c;\n            }}\n          >\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputUsername\" className=\"form-label\">\n                Sukurti vartotojo prisijungimo vardą\n              </label>\n              <Input\n                name=\"name\"\n                onChange={this.handleInputChange}\n                validations={[vusername]}\n                value={name}\n                type=\"text\"\n                placeholder=\"Įveskite prisijungimo vardą\"\n                className=\"form-control\"\n                id=\"name\"\n                aria-describedby=\"usernameHelp\"\n              />\n              <div id=\"usernameHelp\" className=\"form-text text-secondary\">\n                pvz.: VardasPavardė\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n                Sukurti vartotojo prisijungimo slaptažodį\n              </label>\n              <Input\n                name=\"pass\"\n                value={pass}\n                onChange={this.handleInputChange}\n                validations={[vpassword]}\n                type=\"text\"\n                placeholder=\"Įveskite slaptažodį\"\n                className=\"form-control\"\n                id=\"pass\"\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n                Priskirti role\n              </label>\n              <select\n                defaultValue=\"ROLE_SPEC\"\n                onChange={this.handleSelectChange}\n                className=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n              >\n                <option value=\"ROLE_SPEC\">Švietimo specialistas</option>\n                <option value=\"ROLE_PARENT\">Globėjas</option>\n              </select>\n            </div>\n            <button\n              type=\"submit\"\n              onClick={this.handleCreate}\n              className=\"btn btn-success mr-3\"\n              disabled={this.state.loading}\n            >\n              {this.state.loading && (\n                <span className=\"spinner-border spinner-border-sm\"></span>\n              )}\n              Sukurti\n            </button>\n            <NavLink to=\"/admin\" className=\"btn btn-secondary mr-3\">\n              Atšaukti\n            </NavLink>\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div\n                  className={\n                    this.state.successful\n                      ? \"alert alert-success\"\n                      : \"alert alert-danger\"\n                  }\n                  role=\"alert\"\n                >\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={(c) => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n          <h5 className=\"text-center mt-5\">Naudotojų sąrašas</h5>\n          <table className=\"table col-6 mt-3 mx-auto\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Prisijungimo vardas</th>\n                <th scope=\"col\">Rolė</th>\n              </tr>\n            </thead>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AuthService from \"../services/auth.service\";\nimport AdminMainPage from \"./AdminMainPage\";\n\nclass MainAfterLogin extends Component {\n  state = {\n    redirect: null,\n    userReady: false,\n    currentUser: { username: \"\" },\n    roles: [],\n  };\n\n  componentDidMount() {\n    const currentUser = AuthService.getCurrentUser();\n\n    if (!currentUser) this.setState({ redirect: \"/dis-app/home\" });\n    this.setState({\n      currentUser: currentUser,\n      userReady: true,\n      roles: currentUser.roles,\n    });\n  }\n\n  render() {\n    if (this.state.roles.indexOf(\"ROLE_ADMIN\") > 0) return <AdminMainPage />;\n\n    return (\n      <h1>\n        Depending on role you will see content here. Parent and Spec main\n        screens has not been created yet!\n      </h1>\n    );\n  }\n}\n\nexport default MainAfterLogin;\n","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport Navbar from \"./components/navbar.component\";\nimport Login from \"./components/login.component\";\nimport Register from \"./components/register.component\";\nimport BoardUser from \"./components/board-user.component\";\nimport BoardModerator from \"./components/board-moderator.component\";\nimport BoardAdmin from \"./components/board-admin.component\";\nimport MainAfterLogin from \"./components/MainAferLogin\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route\n              exact\n              path={[\"/dis-app\", \"/dis-app/login\"]}\n              component={Login}\n            />\n            <Route exact path=\"/dis-app/register\" component={Register} />\n            <Route exact path=\"/dis-app/profile\" component={MainAfterLogin} />\n            <Route path=\"/dis-app/user\" component={BoardUser} />\n            <Route path=\"/dis-app/mod\" component={BoardModerator} />\n            <Route path=\"/dis-app/admin\" component={BoardAdmin} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.86652faf.png\";"],"sourceRoot":""}